"""
*******************
analysis_example.py
*******************

Example of a script for analyzing a corpus of sounds. It demonstrates the sequences of calls that are made in order to build the corpus.

To run
------

cd to the directory containing this file.
run ``python analysis_example.py`

It will populate several folders with files generated by the analysis process. This is what the folder structure should look like pre-analysis.
	::
		/.
		/snd/scraped
					/ 3 files
		/snd/bowed
				  / 3 more files
		/osc
		/json
		...
		.sc file(s) - with Synthdefs
		.py file(s) - like this one

After analysis, there will be ``.osc`` files in the ``/osc`` directory. ``md`` directories will be created where needed to hold raw metadata files. CorpusDB relies on this structure and expects to find files in these particular places. After each corpus (or, more accurately, sub-corpus) there will be a ``.json`` file exported with the name of the subcorpus.

The use of the term subcorpus may be a bit confusing. If this example has two subcorpora, what is the corpus? The answer is simple: we are demonstrating two consecutive corpus analyses in order to show how it is done. A single corpus would have one directory under the ``snd`` directory.


"""

import os, os.path, glob
import corpusdb
import numpy as np
from numpy import *


def find_cut_points(raw_power, raw_mfccs):
	"""
	Given raw_power and raw_mfccs arrays, find indices to use as segmentation cut points.
	* We are looking for frames where there is a significant change in both mfccs and power.
	* This is just one way to do this, and definitely the most sophisticated.
	* It was developed by some trial and error, having an idea of what density of cut points we were looking for.
	"""
	# diff along time axis
	diffs = np.diff(raw_mfccs, axis=0)
	# sum of abs. vals (of diffs) along data axis
	sum = np.sum(np.abs(diffs), axis=1)
	# take the average
	avg = np.mean(sum)
	# find indices where sum is greater than the avg. of all sums (peaks) 
	sdiff = np.where(sum>avg)
	# find where abs. val. of power diff is greater than 0.1 * mean of avg. of all power values	
	pdiff = np.where(np.abs(np.diff(raw_power))>(mean(raw_power)*0.1))
	# intersection of indices from both mfccs and power
	cutpoints = sorted(list(set(sdiff[0]) | set(pdiff[0])))
	# thin out indices too close together
	spaced = [0]
	for cpt in cutpoints:
		if (cpt - spaced[-1]) > 4: spaced += [cpt]
	return spaced
	
	


FOLDERS = ['scraped', 'bowed'] # these are folders in the snd directory
anchorpath = os.getcwd() # lets assume that we are executing the script from the corpus' dir

for snd_subdir in FOLDERS:
	
	sndpath = os.path.join(anchorpath, 'snd', snd_subdir)
	print 'sndpath: ', sndpath
	corpus = corpusdb.CorpusDB(anchorpath)

	## iterate on all files in dir
	for f in glob.glob( os.path.join(sndpath, '*.wav') ):
	
		for tval in [0.5, 1.0, 2.0]:

			print '1. adding: ', os.path.basename(f), ' + ', tval
			node = corpus.add_sound_file(filename=os.path.basename(f), sfid=None, srcFileID=None, tratio=tval, sfGrpID=0, subdir=snd_subdir)
			sfid = node.sfid
			print '2. sfid: ', sfid
			
			corpus.analyze_sound_file(os.path.basename(f), sfid, tratio=tval, subdir=snd_subdir)
			powers, mfcccs = corpus.get_raw_metadata(sfid)
			
			sfdur = (corpus.sftree.nodes[sfid].duration / tval)
			cut_list = find_cut_points(powers, mfcccs)
			print '3. sfdur: ', sfdur
			print '4. cut list (length):  ', cut_list, ' (', len(cut_list), ')'
					
			pair_list = []
			# cut_list is in frames!
			if len(cut_list) == 1:
				pair_list += [[(frm*0.04), sfdur]]
			else:
				for frm in cut_list:
					pair_list += [[(frm*0.04), 0]]
				print pair_list
				pair_list[-1][1] = sfdur - pair_list[-1][0]
				for i, pair in enumerate(pair_list[0:-1]):
					pair_list[i][1] = pair_list[i+1][0] - pair_list[i][0]
			
			print '5. pair list: ', pair_list
			
			pair = pair_list[0]
			corpus.add_sound_file_unit(sfid, onset=pair[0], dur=pair[1], tag=9) # tag first unit
			if len(pair_list) == 2:
				pair = pair_list[-1]
				if pair[1] > 0:
					sfid = corpus.add_sound_file_unit(sfid, onset=pair[0], dur=pair[1], tag=99) # tag first unit
					print '6a. Adding a head sf-unit for a PARENT NODE with sfid: ', sfid, ', onset: ', pair[0], ', dur: ', pair[1], ' and tag 99.'
			elif len(pair_list) > 2:
				for i, pair in enumerate(pair_list[1:-1]):
					sfid = corpus.add_sound_file_unit(sfid, onset=pair[0], dur=pair[1], tag=0)
					print '6b. Adding a body sf-unit for a PARENT NODE with sfid: ', sfid, ', onset: ', pair[0], ', dur: ', pair[1], ' and tag 0.'
				pair = pair_list[-1]
				if pair[1] > 0:
					sfid = corpus.add_sound_file_unit(sfid, onset=pair[0], dur=pair[1], tag=99) # tag first unit
					print '6c. Adding a tail sf-unit for a PARENT NODE with sfid: ', sfid, ', onset: ', pair[0], ', dur: ', pair[1], ' and tag 99.'
			
			corpus.segment_units(sfid)
			corpus._deactivate_raw_sound_file(sfid)
			
			param_pairs_list = [['combM', 'delay', 0.025, 'decay', 0.99, 'dur', sfdur],
				['combM', 'delay', 0.02, 'decay', 0.99, 'dur', sfdur],
				['magSmear', 'bins', 9, 'dur', sfdur],
				['magSmear', 'bins', 99, 'dur', sfdur],
				['partialSynth', 'transp', tval, 'start', 5, 'envDur', (sfdur*0.5), 'dur', sfdur],
				['partialSynth', 'transp', tval, 'start', 25, 'envDur', (sfdur*0.5), 'dur', sfdur],
				['xoverM', 'amp', 0.0005, 'smooth', 0.9, 'dur', sfdur],
				['xoverM', 'amp', 0.005, 'smooth', 0.9, 'dur', sfdur]]

			for param_pair in param_pairs_list:
				child_node = corpus.add_sound_file(filename=None, 
													sfid=None, 
													srcFileID=sfid, 
													tratio=tval, 
													sfGrpID=0,
													synthdef=[param_pair[0]], 
													params=[(['inbus', 20, 'outbus', 21] + param_pair[1:])])
				child_sfid = child_node.sfid
				print 'CHILD SFID: ', child_sfid
				corpus.analyze_sound_file(os.path.basename(f), child_sfid, tratio=tval, subdir=snd_subdir)
				powers, mfcccs = corpus.get_raw_metadata(sfid)
				
				sfdur = corpus.sftree.nodes[child_sfid].duration / tval
				cut_list = find_cut_points(powers, mfcccs)
				print '3. sfdur: ', sfdur
				print '4. cut list (length):  ', cut_list, ' (', len(cut_list), ')'
				
				pair_list = []
				# cut_list is in frames!
				if len(cut_list) == 1:
					pair_list += [[(frm*0.04), sfdur]]
				else:
					for frm in cut_list:
						pair_list += [[(frm*0.04), 0]]
					print pair_list
					pair_list[-1][1] = sfdur - pair_list[-1][0]
					for i, pair in enumerate(pair_list[0:-1]):
						pair_list[i][1] = pair_list[i+1][0] - pair_list[i][0]
				
				print '5. pair list: ', pair_list
				
				pair = pair_list[0]

				corpus.add_sound_file_unit(child_sfid, onset=pair[0], dur=pair[1], tag=9) # tag first unit
				if len(pair_list) == 2:
					pair = pair_list[-1]
					if pair[1] > 0:
						corpus.add_sound_file_unit(child_sfid, onset=pair[0], dur=pair[1], tag=99) # tag first unit
						print '6a. Adding a head sf-unit for a EFX NODE with sfid: ', sfid, ', onset: ', pair[0], ', dur: ', pair[1], ' and tag 99.'
				elif len(pair_list) > 2:
					for i, pair in enumerate(pair_list[1:-1]):
						corpus.add_sound_file_unit(child_sfid, onset=pair[0], dur=pair[1], tag=0)
						print '6b. Adding a body sf-unit for a EFX NODE with sfid: ', sfid, ', onset: ', pair[0], ', dur: ', pair[1], ' and tag 0.'
					pair = pair_list[-1]
					if pair[1] > 0:
						corpus.add_sound_file_unit(child_sfid, onset=pair[0], dur=pair[1], tag=99) # tag first unit
						print '6c. Adding a tail sf-unit for a EFX NODE with sfid: ', sfid, ', onset: ', pair[0], ', dur: ', pair[1], ' and tag 99.'

				corpus.segment_units(child_sfid)
				corpus._deactivate_raw_sound_file(child_sfid)

	# Now convert corpus to array form and save JSON file		
	corpus_array = corpus.convert_corpus_to_array(map_flag=True)
	corpus.export_corpus_to_json(anchorpath + '/json/biped-' + snd_subdir + '-exp24.json')

